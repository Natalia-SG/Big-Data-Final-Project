if (!dir.exists(galah_config()$cache_directory)) {
message ("Creating cache directory ", galah_config()$cache_directory)
dir.create(galah_config()$cache_directory)
}
galah_config (caching=TRUE)
# ala_config (caching=FALSE)
# ala_config(warn_on_empty=TRUE)
#  search spatialreference.org for coordinate system definitions
in_prj  <- paste0("+init=epsg:4326") # WGS84 in decimal degrees
out_prj <- paste0("+init=epsg:3577") # Albers equal area projection for Australia
failed <- c()
#  Define a bounding box.
#  The template approach is awkward and inefficient
#  Need a better way, perhaps using sprintf
bbox_template <- "POLYGON((e s, e n, w n, w s, e s))"
#  bbox for the globe
bb <- list (e=180, w=-180, n=90, s=-90)
#  rough bounding box for Australia as WKT format, edit as appropriate
bb <- list (e=154, w=112.9, n=-9, s=-43.74)
#  approx NSW for tests
# bb <- list (e=153, w=140, n=-28, s=-37)
bbox = bbox_template
for (key in names(bb)) {
bbox <- gsub (key, bb[key], bbox)
}
location_filter <- galah_geolocate(query = bbox)
#  these are the colnames we want in the output
subset_colnames <- c(
"id",     "x",     "y",       "scientificName",
"family", "genus", "species", "rank",
"coordinateUncertaintyInMetres",
"decimalLongitude", "decimalLatitude"
)
# column_subset <- select_columns(group = "basic")
column_subset <- galah_select(group = "basic", coordinateUncertaintyInMeters)
selection_filters <- galah_filter(
coordinateUncertaintyInMeters < 10000,
profile = "ALA"
)
#  An email address is needed to download
#  data from the ALA - you need to provide one
email_address <- "natalia.sengupta@gmail.com"
if (email_address == "") {message ("EMAIL ADDRESS NOT SET")}
galah_config(email=email_address)
#  make sure we use a local cache on the EcoCloud
if (Sys.getenv("USER") == "jovyan") {
# dir.create("~/ala_cache", showWarnings=FALSE)
galah_config(cache_directory="~/ala_cache")
}
if (!dir.exists(galah_config()$cache_directory)) {
message ("Creating cache directory ", galah_config()$cache_directory)
dir.create(galah_config()$cache_directory)
}
galah_config (caching=TRUE)
# ala_config (caching=FALSE)
# ala_config(warn_on_empty=TRUE)
#  search spatialreference.org for coordinate system definitions
in_prj  <- paste0("+init=epsg:4326") # WGS84 in decimal degrees
out_prj <- paste0("+init=epsg:3577") # Albers equal area projection for Australia
failed <- c()
#  Define a bounding box.
#  The template approach is awkward and inefficient
#  Need a better way, perhaps using sprintf
bbox_template <- "POLYGON((e s, e n, w n, w s, e s))"
#  bbox for the globe
bb <- list (e=180, w=-180, n=90, s=-90)
#  rough bounding box for Australia as WKT format, edit as appropriate
bb <- list (e=154, w=112.9, n=-9, s=-43.74)
#  approx NSW for tests
# bb <- list (e=153, w=140, n=-28, s=-37)
bbox = bbox_template
for (key in names(bb)) {
bbox <- gsub (key, bb[key], bbox)
}
location_filter <- galah_geolocate(query = bbox)
#  these are the colnames we want in the output
subset_colnames <- c(
"id",     "x",     "y",       "scientificName",
"family", "genus", "species", "rank",
"coordinateUncertaintyInMetres",
"decimalLongitude", "decimalLatitude"
)
# column_subset <- select_columns(group = "basic")
column_subset <- galah_select(group = "basic", coordinateUncertaintyInMeters)
selection_filters <- galah_filter(
coordinateUncertaintyInMeters < 10000,
profile = "ALA"
)
#  Edit as needed.  Some can be case sensitive,
#  so check the ALA website to be certain.
#  We also need a kingdom for Corymbia because there
#  is a suppressed homonym from the Coleoptera
taxon_list <- list (
# "Corymbia"
#   = list (genus = "Eucalyptus", kingdom="Plantae")
"Eucalyptus" = "Eucalyptus"
)
taxon_list
for (dir in names(taxon_list)) {
if (!dir.exists(dir)) {
print (paste("Creating directory", dir))
dir.create(dir, showWarnings = TRUE)
}
collated_df = data.frame()
search_term = taxon_list[[dir]]
print (paste0 ("Search term is ", paste (search_term)))
#identifier = search_taxa("Eucalyptus")
identifier = search_taxa(search_term)
occ = atlas_occurrences(
# identify = galah_identify(search_term),
identify  = identifier,
filter    = selection_filters,
geolocate = location_filter,
select    = column_subset
)
head(occ)
print (dim (occ))
coords_ll = occ[c("decimalLongitude", "decimalLatitude")] %>%
as.data.frame %>%
sf::st_as_sf(coords = c(1,2), crs=in_prj)
#  no doubt this could be dplyrd
coords_albers = st_transform(coords_ll, crs = st_crs(out_prj))
coords_albers = st_coordinates(coords_albers, coords=c("X","Y"))
colnames(coords_albers) = c("x","y")
occ = cbind(occ, coords_albers)
csv_fname = paste0(dir, "/data.csv")
write.csv(occ, file=csv_fname)
if (nrow(collated_df) == 0) {
collated_df = occ
} else {
collated_df = rbind (collated_df, occ)
}
#  we could also save and re-use the occ df as an RDS file
}
library(readr)
Euc_data <- read_csv("Desktop/SL Tut:Lab/Euc_data.csv")
View(Euc_data)
View(Euc_data)
library(ggplot2)
ggplot(xgridded, aes(latitude, richness)) + geom_point() + theme_bw()
#  An email address is needed to download
#  data from the ALA - you need to provide one
email_address <- "natalia.sengupta@gmail.com"
if (email_address == "") {message ("EMAIL ADDRESS NOT SET")}
galah_config(email=email_address)
#  make sure we use a local cache on the EcoCloud
if (Sys.getenv("USER") == "jovyan") {
# dir.create("~/ala_cache", showWarnings=FALSE)
galah_config(cache_directory="~/ala_cache")
}
if (!dir.exists(galah_config()$cache_directory)) {
message ("Creating cache directory ", galah_config()$cache_directory)
dir.create(galah_config()$cache_directory)
}
galah_config (caching=TRUE)
# ala_config (caching=FALSE)
# ala_config(warn_on_empty=TRUE)
#  search spatialreference.org for coordinate system definitions
in_prj  <- paste0("+init=epsg:4326") # WGS84 in decimal degrees
out_prj <- paste0("+init=epsg:3577") # Albers equal area projection for Australia
failed <- c()
#  Define a bounding box.
#  The template approach is awkward and inefficient
#  Need a better way, perhaps using sprintf
bbox_template <- "POLYGON((e s, e n, w n, w s, e s))"
#  bbox for the globe
bb <- list (e=180, w=-180, n=90, s=-90)
#  rough bounding box for Australia as WKT format, edit as appropriate
bb <- list (e=154, w=112.9, n=-9, s=-43.74)
#  approx NSW for tests
# bb <- list (e=153, w=140, n=-28, s=-37)
bbox = bbox_template
for (key in names(bb)) {
bbox <- gsub (key, bb[key], bbox)
}
location_filter <- galah_geolocate(query = bbox)
#  these are the colnames we want in the output
subset_colnames <- c(
"id",     "x",     "y",       "scientificName",
"family", "genus", "species", "rank",
"coordinateUncertaintyInMetres",
"decimalLongitude", "decimalLatitude"
)
# column_subset <- select_columns(group = "basic")
column_subset <- galah_select(group = "basic", coordinateUncertaintyInMeters)
selection_filters <- galah_filter(
coordinateUncertaintyInMeters < 10000,
profile = "ALA"
)
#  An email address is needed to download
#  data from the ALA - you need to provide one
email_address <- "natalia.sengupta@gmail.com"
if (email_address == "") {message ("EMAIL ADDRESS NOT SET")}
galah_config(email=email_address)
#  make sure we use a local cache on the EcoCloud
if (Sys.getenv("USER") == "jovyan") {
# dir.create("~/ala_cache", showWarnings=FALSE)
galah_config(cache_directory="~/ala_cache")
}
if (!dir.exists(galah_config()$cache_directory)) {
message ("Creating cache directory ", galah_config()$cache_directory)
dir.create(galah_config()$cache_directory)
}
galah_config (caching=TRUE)
# ala_config (caching=FALSE)
# ala_config(warn_on_empty=TRUE)
#  search spatialreference.org for coordinate system definitions
in_prj  <- paste0("+init=epsg:4326") # WGS84 in decimal degrees
out_prj <- paste0("+init=epsg:3577") # Albers equal area projection for Australia
failed <- c()
#  Define a bounding box.
#  The template approach is awkward and inefficient
#  Need a better way, perhaps using sprintf
bbox_template <- "POLYGON((e s, e n, w n, w s, e s))"
#  bbox for the globe
bb <- list (e=180, w=-180, n=90, s=-90)
#  rough bounding box for Australia as WKT format, edit as appropriate
bb <- list (e=154, w=112.9, n=-9, s=-43.74)
#  approx NSW for tests
# bb <- list (e=153, w=140, n=-28, s=-37)
bbox = bbox_template
for (key in names(bb)) {
bbox <- gsub (key, bb[key], bbox)
}
location_filter <- galah_geolocate(query = bbox)
#  these are the colnames we want in the output
subset_colnames <- c(
"id",     "x",     "y",       "scientificName",
"family", "genus", "species", "rank",
"coordinateUncertaintyInMetres",
"decimalLongitude", "decimalLatitude"
)
# column_subset <- select_columns(group = "basic")
column_subset <- galah_select(group = "basic", coordinateUncertaintyInMeters)
selection_filters <- galah_filter(
coordinateUncertaintyInMeters < 10000,
profile = "ALA"
)
#  Edit as needed.  Some can be case sensitive,
#  so check the ALA website to be certain.
#  We also need a kingdom for Corymbia because there
#  is a suppressed homonym from the Coleoptera
taxon_list <- list (
# "Corymbia"
#   = list (genus = "Eucalyptus", kingdom="Plantae")
"Eucalyptus" = "Eucalyptus"
)
taxon_list
for (dir in names(taxon_list)) {
if (!dir.exists(dir)) {
print (paste("Creating directory", dir))
dir.create(dir, showWarnings = TRUE)
}
collated_df = data.frame()
search_term = taxon_list[[dir]]
print (paste0 ("Search term is ", paste (search_term)))
#identifier = search_taxa("Eucalyptus")
identifier = search_taxa(search_term)
occ = atlas_occurrences(
# identify = galah_identify(search_term),
identify  = identifier,
filter    = selection_filters,
geolocate = location_filter,
select    = column_subset
)
head(occ)
print (dim (occ))
coords_ll = occ[c("decimalLongitude", "decimalLatitude")] %>%
as.data.frame %>%
sf::st_as_sf(coords = c(1,2), crs=in_prj)
#  no doubt this could be dplyrd
coords_albers = st_transform(coords_ll, crs = st_crs(out_prj))
coords_albers = st_coordinates(coords_albers, coords=c("X","Y"))
colnames(coords_albers) = c("x","y")
occ = cbind(occ, coords_albers)
csv_fname = paste0(dir, "/data.csv")
write.csv(occ, file=csv_fname)
if (nrow(collated_df) == 0) {
collated_df = occ
} else {
collated_df = rbind (collated_df, occ)
}
#  we could also save and re-use the occ df as an RDS file
}
library(readr)
Euc_data <- read_csv("Desktop/SL Tut:Lab/Euc_data.csv")
View(Euc_data)
for (dir in names(taxon_list)) {
if (!dir.exists(dir)) {
print (paste("Creating directory", dir))
dir.create(dir, showWarnings = TRUE)
}
collated_df = data.frame()
search_term = taxon_list[[dir]]
print (paste0 ("Search term is ", paste (search_term)))
#identifier = search_taxa("Eucalyptus")
identifier = search_taxa(search_term)
occ = atlas_occurrences(
# identify = galah_identify(search_term),
identify  = identifier,
filter    = selection_filters,
geolocate = location_filter,
select    = column_subset
)
head(occ)
print (dim (occ))
coords_ll = occ[c("decimalLongitude", "decimalLatitude")] %>%
as.data.frame %>%
sf::st_as_sf(coords = c(1,2), crs=in_prj)
#  no doubt this could be dplyrd
coords_albers = st_transform(coords_ll, crs = st_crs(out_prj))
coords_albers = st_coordinates(coords_albers, coords=c("X","Y"))
colnames(coords_albers) = c("x","y")
occ = cbind(occ, coords_albers)
csv_fname = paste0(dir, "/data.csv")
write.csv(occ, file=csv_fname)
if (nrow(collated_df) == 0) {
collated_df = occ
} else {
collated_df = rbind (collated_df, occ)
}
#  we could also save and re-use the occ df as an RDS file
}
collated_fname = paste0(dir, "/collated.csv")
write.csv (collated_df, collated_fname)
install.packages("rgdal")
library(tidync)
library(tidyverse)
library(R.utils)
#gunzip("data-raw/cru_ts3.21.2001.2010.pre.dat.nc.gz", remove=FALSE)
file <- "cru_ts3.21.2001.2010.pre.dat.nc"
data <- tidync(file)
str(data)
lon  <-
tidync(file) %>% activate("D0") %>% hyper_tibble()
lat <-
tidync(file) %>% activate("D1") %>% hyper_tibble()
time <-
tidync(file) %>% activate("D2") %>% hyper_tibble()
location_data <-
tidync(file) %>% activate("pre") %>%
hyper_filter(lon = lon == 151.25, lat = lat== -33.75) %>%
hyper_tibble()
tidync(file) %>% activate("pre") %>%
hyper_filter(time = time > 36905 & time < 38000) %>%
hyper_filter(lon = lon == 151.25, lat = lat== -33.75) %>%
hyper_tibble() %>%
ggplot(aes(x = time, y= pre)) +
geom_line()
raster_object <- raster::raster("data-raw/cru_ts3.21.2001.2010.pre.dat.nc")
install.packages("terra")
install.packages("terra") dependencies = true
installed.packages("terra")
install.packages("terra")
library (galah)
library (stringr)
library (rgdal)
library(sf)
library(maps)
library(mapdata)
library(dplyr)
library(tidyr)
library(ggplot2)
#  needs additional system level libs for this to work
#  update - perhaps not any more but needs testing across platforms
# library (CoordinateCleaner)
#  An email address is needed to download
#  data from the ALA - you need to provide one
email_address <- "natalia.sengupta@gmail.com"
if (email_address == "") {message ("EMAIL ADDRESS NOT SET")}
galah_config(email=email_address)
#  make sure we use a local cache on the EcoCloud
if (Sys.getenv("USER") == "jovyan") {
# dir.create("~/ala_cache", showWarnings=FALSE)
galah_config(cache_directory="~/ala_cache")
}
if (!dir.exists(galah_config()$cache_directory)) {
message ("Creating cache directory ", galah_config()$cache_directory)
dir.create(galah_config()$cache_directory)
}
galah_config (caching=TRUE)
# ala_config (caching=FALSE)
# ala_config(warn_on_empty=TRUE)
#  search spatialreference.org for coordinate system definitions
in_prj  <- paste0("+init=epsg:4326") # WGS84 in decimal degrees
out_prj <- paste0("+init=epsg:3577") # Albers equal area projection for Australia
failed <- c()
#  Define a bounding box.
#  The template approach is awkward and inefficient
#  Need a better way, perhaps using sprintf
bbox_template <- "POLYGON((e s, e n, w n, w s, e s))"
#  bbox for the globe
bb <- list (e=180, w=-180, n=90, s=-90)
#  rough bounding box for Australia as WKT format, edit as appropriate
bb <- list (e=154, w=112.9, n=-9, s=-43.74)
#  approx NSW for tests
# bb <- list (e=153, w=140, n=-28, s=-37)
bbox = bbox_template
for (key in names(bb)) {
bbox <- gsub (key, bb[key], bbox)
}
location_filter <- galah_geolocate(query = bbox)
#  these are the colnames we want in the output
subset_colnames <- c(
"id",     "x",     "y",       "scientificName",
"family", "genus", "species", "rank",
"coordinateUncertaintyInMetres",
"decimalLongitude", "decimalLatitude"
)
# column_subset <- select_columns(group = "basic")
column_subset <- galah_select(group = "basic", coordinateUncertaintyInMeters)
selection_filters <- galah_filter(
coordinateUncertaintyInMeters < 10000,
profile = "ALA"
)
#  Edit as needed.  Some can be case sensitive,
#  so check the ALA website to be certain.
#  We also need a kingdom for Corymbia because there
#  is a suppressed homonym from the Coleoptera
taxon_list <- list (
# "Corymbia"
#   = list (genus = "Eucalyptus", kingdom="Plantae")
"Eucalyptus" = "Eucalyptus"
)
taxon_list
for (dir in names(taxon_list)) {
if (!dir.exists(dir)) {
print (paste("Creating directory", dir))
dir.create(dir, showWarnings = TRUE)
}
collated_df = data.frame()
search_term = taxon_list[[dir]]
print (paste0 ("Search term is ", paste (search_term)))
#identifier = search_taxa("Eucalyptus")
identifier = search_taxa(search_term)
occ = atlas_occurrences(
# identify = galah_identify(search_term),
identify  = identifier,
filter    = selection_filters,
geolocate = location_filter,
select    = column_subset
)
head(occ)
print (dim (occ))
coords_ll = occ[c("decimalLongitude", "decimalLatitude")] %>%
as.data.frame %>%
sf::st_as_sf(coords = c(1,2), crs=in_prj)
#  no doubt this could be dplyrd
coords_albers = st_transform(coords_ll, crs = st_crs(out_prj))
coords_albers = st_coordinates(coords_albers, coords=c("X","Y"))
colnames(coords_albers) = c("x","y")
occ = cbind(occ, coords_albers)
csv_fname = paste0(dir, "/data.csv")
write.csv(occ, file=csv_fname)
if (nrow(collated_df) == 0) {
collated_df = occ
} else {
collated_df = rbind (collated_df, occ)
}
#  we could also save and re-use the occ df as an RDS file
}
knitr::opts_chunk$set(echo = TRUE)
location_data <-
tidync(file) %>% activate("tmp") %>%
hyper_filter(lat = abs(lat - -27.4705) == min(abs(lat - -27.4705))) %>%
hyper_filter(lon = abs(lon - 153.0260) == min(abs(lon - 153.0260))) %>%
hyper_tibble()%>%
mutate(time = as.Date(time, origin = "1900-01-01"))
knitr::opts_chunk$set(echo = TRUE)
library(tidync)
library(tidyverse)
library(R.utils)
library(lubridate)
if(!file.exists(file)){
gunzip("cru_ts3.21.2001.2010.pre.dat.nc.gz", remove=FALSE)
}
library(tidync)
library(tidyverse)
library(R.utils)
library(lubridate)
library(purrr)
location_data_pre_total <- readRDS("location_data_pre_total.RDS")
setwd("~/Desktop/Climate_Data")
location_data_pre_total <- readRDS("location_data_pre_total.RDS")
setwd("~/Desktop/Climate_Data/Project")
library(tidync)
library(tidyverse)
library(R.utils)
library(lubridate)
library(purrr)
location_data_pre_total <- readRDS("location_data_pre_total.RDS")
library(tidync)
library(tidyverse)
library(R.utils)
library(lubridate)
library(purrr)
location_data_pre_total <- readRDS("location_data_pre_total.RDS")
setwd("~/Desktop/Climate_Data/Project")
location_data_pre_total <- readRDS("location_data_pre_total.RDS")
location_data_tmp_total <- readRDS("~/Desktop/Climate_Data/Project/location_data_tmp_total.RDS")
location_data_pre_total <- readRDS("location_data_pre_total.RDS")
library(tidync)
library(tidyverse)
library(R.utils)
library(lubridate)
library(purrr)
location_data_pre_total <- readRDS("location_data_pre_total.RDS")
setwd(~/Desktop/Climate_Data/Project/)
setwd(/Desktop/Climate_Data/Project/)
setwd(/Desktop/Climate_Data/Project/)
setwd("~/Desktop/Climate_Data/Project")
location_data_pre_total <- readRDS("location_data_pre_total.RDS")
